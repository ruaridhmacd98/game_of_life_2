[{"/home/ruaridh/life/src/index.js":"1","/home/ruaridh/life/src/reportWebVitals.js":"2","/home/ruaridh/life/src/App.js":"3","/home/ruaridh/life/src/tutorial.js":"4"},{"size":478,"mtime":1607455234750,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1607454364434,"results":"7","hashOfConfig":"6"},{"size":3154,"mtime":1607797246081,"results":"8","hashOfConfig":"6"},{"size":747,"mtime":1607767146411,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1v4mck3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"/home/ruaridh/life/src/index.js",[],["22","23"],"/home/ruaridh/life/src/reportWebVitals.js",[],"/home/ruaridh/life/src/App.js",["24","25"],"import React from 'react';\nimport Tutorial from './tutorial.js';\nimport './App.css';\n\nclass Canvas extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n\t  width: null,\n\t  height: null,\n\t  ctx: null,\n\t  isRunning: true,\n    };\n  }\n\n  componentDidMount() {\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.canvas.width = window.innerWidth;\n\tctx.canvas.height = window.innerHeight;\n    ctx.canvas.addEventListener('mousedown', onclick);\n    var game = new Game();\n    this.setState({width: canvas.width});\n    this.setState({height: canvas.height});\n    setInterval(()=>{\n\tif (this.state.isRunning) {\n\t\tlet cells = game.iterate();\n\t\tthis.draw(cells, ctx)\n\t}\n     }, 250)\n     }\n\n  updateRunning = () => {\n    this.setState({isRunning: !this.state.isRunning})\n  }\n\n  handleClick(event){\n\tlet ctx = this.refs.canvas.getContext(\"2d\");\n \tlet x = event.clientX - ctx.canvas.offsetLeft;\n\tlet y = event.clientY - ctx.canvas.offsetTop;\n  \n  }\n\n  draw(cells, ctx){\n    ctx.fillStyle=\"#E0E0E0\";\n    ctx.fillRect(0,0,this.state.width,this.state.height);\n    ctx.fillStyle=\"#000000\";\n    cells.forEach((row,y,grid)=>{\n      row.forEach((cell_state,x,row)=>{\n\tctx.fillRect(y*10+31 , x*10+31  ,8,8);\n      })\n    })\n  }\n\n  render (){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <body>\n\t<Tutorial/>\n\t<button className=\"button\" onClick={this.updateRunning}>\n\t    {this.state.isRunning ? <div>Stop</div>\n                            : <div>Start</div>}\n\t</button>\n        <canvas ref=\"canvas\" onClick={this.handleClick}></canvas>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n\n\nclass Game {\n  constructor() {\n    this.state = {\n      grid: this.getInitialGrid(),\n    };\n  }\n\n  iterate(){\n    console.log(this.state.grid)\n    this.updateGrid();\n    return this.state.grid;\n  }\n\n  updateGrid(){\n    let counts = this.getCounts()\n    let newGrid = this.generateNewGrid(counts)\n    this.state.grid = newGrid\n  }\n\n  getCounts() {\n    let counts = new Map();\n    this.state.grid.forEach((row,y,grid)=>{\n      row.forEach((cell_state,x,row)=>{\n\tfor(let i=-1; i<2; i++){\n\t   for(let j =-1; j<2; j++){\n\t\tif(!counts.has(y+i)){\n\t\t   counts.set(y+i, new Map())\n\t\t}\n\t\tif(!counts.get(y+i).has(x+j)){\n\t\t   counts.get(y+i).set(x+j, 0);\n\t\t}\n\t\tcounts.get(y+i).set(x+j, counts.get(y+i).get(x+j)+1);\n\t   }\n\t}\n    })\n    })\n    return counts;\n  }\n\n  generateNewGrid(counts){\n     let buffer = new Map();\n     counts.forEach((row, y, counts)=>{\n\trow.forEach((count, x, row)=>{\n\t\tif(count===3){\n\t\t   if(!buffer.has(y)){\n\t\t\t   buffer.set(y, new Map());\n\t\t   }\n\t\t   buffer.get(y).set(x,0);\n\t\t}\n\t\tif(count===4){\n\t\t  if(this.state.grid.get(y).has(x)){\n\t\t     if(!buffer.has(y)){\n\t\t\t   buffer.set(y, new Map());\n\t\t     }\n\t\t     buffer.get(y).set(x,0);\n\t\t  }\n\t\t}\n      })\n     })\n     return buffer;\n  }\n\n  getInitialGrid() {\n    const grid = new Map();\n\tlet row= new Map();\n        row.set(1,0);\n\tgrid.set(1,row);\n\trow = new Map();\n\trow.set(2,0)\n\tgrid.set(2,row);\n\trow = new Map();\n\trow.set(0,0)\n\trow.set(1,0)\n\trow.set(2,0)\n\tgrid.set(3,row);\n    return grid;\n  }\n}\n","/home/ruaridh/life/src/tutorial.js",["26"],"import React from 'react';\nimport Popup from 'reactjs-popup';\nimport './tutorial.css';\n\nexport default () => (\n  <Popup\n    trigger={<button className=\"button\"> Tutorial </button>}\n    modal\n    nested\n  >\n    {close => (\n      <div className=\"modal\">\n        <button className=\"close\" onClick={close}>\n          &times;\n        </button>\n        <div className=\"header\"> Tutorial </div>\n        <div className=\"content\">\n          {' '}\n          Take it in turns to place cells.\n        </div>\n        <div className=\"actions\">\n          <button\n            className=\"button\"\n            onClick={() => {\n              close();\n            }}\n          >\n            Got it.\n          </button>\n        </div>\n      </div>\n    )}\n  </Popup>\n);\n",["27","28"],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":39,"column":7,"nodeType":"35","messageId":"36","endLine":39,"endColumn":8},{"ruleId":"33","severity":1,"message":"37","line":40,"column":6,"nodeType":"35","messageId":"36","endLine":40,"endColumn":7},{"ruleId":"38","severity":1,"message":"39","line":5,"column":1,"nodeType":"40","endLine":34,"endColumn":3},{"ruleId":"29","replacedBy":"41"},{"ruleId":"31","replacedBy":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'y' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["43"],["44"],"no-global-assign","no-unsafe-negation"]