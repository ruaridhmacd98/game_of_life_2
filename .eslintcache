[{"/home/ruaridh/life/src/index.js":"1","/home/ruaridh/life/src/reportWebVitals.js":"2","/home/ruaridh/life/src/App.js":"3","/home/ruaridh/life/src/tutorial.js":"4"},{"size":478,"mtime":1607455234750,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1607454364434,"results":"7","hashOfConfig":"6"},{"size":3579,"mtime":1608382369768,"results":"8","hashOfConfig":"6"},{"size":747,"mtime":1607767146411,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1v4mck3",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"12"},"/home/ruaridh/life/src/index.js",[],["21","22"],"/home/ruaridh/life/src/reportWebVitals.js",[],"/home/ruaridh/life/src/App.js",["23","24"],"import React from 'react';\nimport Tutorial from './tutorial.js';\nimport './App.css';\n\nclass Canvas extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n\t  width: null,\n\t  height: null,\n\t  ctx: null,\n\t  isRunning: true,\n    };\n  }\n\n  componentDidMount() {\n    let canvas = this.refs.canvas;\n    let ctx = canvas.getContext(\"2d\");\n    ctx.canvas.width = window.innerWidth;\n\tctx.canvas.height = window.innerHeight;\n    ctx.canvas.addEventListener('mousedown', onclick);\n    var game = new Game();\n    var cells = getInitialGrid();\n    this.setState({width: canvas.width});\n    this.setState({height: canvas.height});\n    this.draw(cells, ctx)\n    setInterval(()=>{\n\tif (this.state.isRunning) {\n\t\tcells = game.iterate(cells);\n\t\tthis.draw(cells, ctx)\n\t}\n     }, 250)\n     }\n\n  updateRunning = () => {\n    this.setState({isRunning: !this.state.isRunning})\n  }\n\n  handleClick(event){\n\tlet ctx = this.refs.canvas.getContext(\"2d\");\n \tlet x = event.clientX - ctx.canvas.offsetLeft;\n\tlet y = event.clientY - ctx.canvas.offsetTop;\n  }\n\n  draw(cells, ctx){\n    ctx.fillStyle=\"#E0E0E0\";\n    ctx.fillRect(0,0,this.state.width,this.state.height);\n    ctx.fillStyle=\"#000000\";\n    const coords = cells.listCells()\n    for(var i=0; i<coords.length; i++){\n\tvar x, y\n\t[x, y] = coords[i]\n\tctx.fillRect(x*10+31 , y*10+31  ,8,8);\n    }\n  }\n\n  render (){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n        <body>\n\t<Tutorial/>\n\t<button className=\"button\" onClick={this.updateRunning}>\n\t    {this.state.isRunning ? <div>Stop</div>\n                            : <div>Start</div>}\n\t</button>\n        <canvas ref=\"canvas\" onClick={this.handleClick}></canvas>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default Canvas;\n\n\nclass Game {\n  iterate(grid){\n    let counts = this.getCounts(grid)\n    let newGrid = this.generateNewGrid(counts, grid)\n    return newGrid;\n  }\n\n  getCounts(grid) {\n    console.log('intial', grid.state.grid)\n    let counts = new Grid();\n    const cells = grid.listCells()\n    for(var c=0; c<cells.length; c++){\n\tvar x, y\n\t[x, y] = cells[c]\n\tfor(let i=-1; i<2; i++){\n\t   for(let j =-1; j<2; j++){\n\t\tif(!counts.has(x+j, y+i)){\n\t\t  counts.set(x+j, y+i, 1);\n\t\t} else {\n\t\t  var count = counts.get(x+j, y+i)\n\t\t  counts.set(x+j, y+i, count+1);\n\t\t}\n\t   }\n\t}\n    }\n    console.log('counts', counts.state.grid)\n    return counts;\n  }\n\n  generateNewGrid(counts, oldGrid){\n    let buffer = new Grid();\n    const cells = counts.listCells()\n    for(var i=0; i<cells.length; i++){\n\tvar x, y;\n\t[x, y] = cells[i];\n\tvar count = counts.get(x, y);\n        if(count===3){\n\t   buffer.set(x, y, 0);\n        }\n        if(count===4){\n          if(oldGrid.has(x, y)){\n\t     buffer.set(x, y, 0);\n          }\n        }\n    }\n    return buffer;\n  }\n}\n\nfunction getInitialGrid() {\n  const grid = new Grid();\n      grid.set(3, 0, 0);\n      grid.set(3, 1, 0);\n      grid.set(3, 2, 0);\n      grid.set(1, 1, 0);\n      grid.set(2, 2, 0);\n  return grid;\n}\n\n\nclass Grid {\n  constructor() {\n    this.state = {\n      grid: new Map(),\n    }\n  }\n\n  set(x, y, value){\n   if(!this.state.grid.has(y)){\n     this.state.grid.set(y, new Map());\n   }\n   this.state.grid.get(y).set(x,value);\n  }\n\n  has(x, y){\n    var res = false\n    if(this.state.grid.has(y)){res = this.state.grid.get(y).has(x)}\n    return res\n  }\n\n  get(x, y){return this.state.grid.get(y).get(x)}\n\n  listCells(){\n    var output = []\n    this.state.grid.forEach((row, y, counts)=>{\n      row.forEach((count, x, row)=>{\n\toutput.push([x, y])\n      })\n    })\n    return output;\n  }\n}\n","/home/ruaridh/life/src/tutorial.js",["25"],"import React from 'react';\nimport Popup from 'reactjs-popup';\nimport './tutorial.css';\n\nexport default () => (\n  <Popup\n    trigger={<button className=\"button\"> Tutorial </button>}\n    modal\n    nested\n  >\n    {close => (\n      <div className=\"modal\">\n        <button className=\"close\" onClick={close}>\n          &times;\n        </button>\n        <div className=\"header\"> Tutorial </div>\n        <div className=\"content\">\n          {' '}\n          Take it in turns to place cells.\n        </div>\n        <div className=\"actions\">\n          <button\n            className=\"button\"\n            onClick={() => {\n              close();\n            }}\n          >\n            Got it.\n          </button>\n        </div>\n      </div>\n    )}\n  </Popup>\n);\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":41,"column":7,"nodeType":"32","messageId":"33","endLine":41,"endColumn":8},{"ruleId":"30","severity":1,"message":"34","line":42,"column":6,"nodeType":"32","messageId":"33","endLine":42,"endColumn":7},{"ruleId":"35","severity":1,"message":"36","line":5,"column":1,"nodeType":"37","endLine":34,"endColumn":3},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"no-unused-vars","'x' is assigned a value but never used.","Identifier","unusedVar","'y' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]